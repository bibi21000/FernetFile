# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference

# For a detailed guide to building and testing with Python, read the docs:
# https://circleci.com/docs/language-python/ for more details
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/orb-intro/
orbs:
  # See the Python orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@2.1.1
  codecov: codecov/codecov@5
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  build-and-test:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/executor-intro/ & https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      # Specify the version you desire here
      # See:https://circleci.com/developer/images/image/cimg/python
      - image: cimg/python:3.12

    # Add steps to the job
    # See: https://circleci.com/docs/jobs-steps/#steps-overview & https://circleci.com/docs/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      - run:
          name: Install dependencies from pyproject.toml
          command: |
            pip install .
            pip install .[zstd]
            pip install .[test]
            pip install codecov-cli
      #- python/install-packages:
          #pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If your requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Run tests
          # This assumes pytest is installed via the install-package step above
          command: pytest --cov-report xml --junitxml=pytest.junit.xml -o junit_family=legacy
      - run:
          name: Run ruff
          command: ruff check --respect-gitignore --output-format junit --output-file ruff.junit.xml . || true
      #~ - run:
          #~ name: Upload coverage
          #~ command: codecovcli do-upload
      - codecov/upload
      - run:
          name: Upload tests result
          #~ command: codecovcli do-upload --report-type test_results --file pytest.junit.xml --file ruff.junit.xml
          command: codecovcli do-upload --report-type test_results --file pytest.junit.xml --file ruff.junit.xml
  testpypi_publish:
    docker:
      - image: cimg/python:3.12
    steps:
      - checkout # checkout source code to working directory
      - run:
          name: Install dependencies from pyproject.toml
          command: |
            pip install .
            pip install .[build]
      - run:
          name: Build package
          command: python3 -m build
      - run:
          name: Upload
          command: python3 -m twine upload --repository testpypi --verbose --user $TWINE_USERNAME --password $TWINE_PASSWORD dist/*
  pypi_publish:
    docker:
      - image: cimg/python:3.12
    steps:
      - checkout # checkout source code to working directory
      - run:
          name: Install dependencies from pyproject.toml
          command: |
            pip install .
            pip install .[build]
      - run:
          name: Build package
          command: python3 -m build
      - run:
          name: Upload
          command: python3 -m twine upload --verbose --user $TWINE_USERNAME --password $TWINE_PROD_PASSWORD dist/*

# Orchestrate jobs using workflow
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
#      - testpypi_publish:
#          requires:
#            - build-and-test
#          filters:
#            tags:
#              only: /^.*[ab]+.*$/
