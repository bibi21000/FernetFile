# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference

# For a detailed guide to building and testing with Python, read the docs:
# https://circleci.com/docs/language-python/ for more details
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/orb-intro/
orbs:
  # See the Python orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@2.1.1
  codecov: codecov/codecov@5
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs

parameters:
  python-version:
    type: string
    default: "3.12"

jobs:
  build-and-test:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - checkout
      - run:
          name: Install dependencies from pyproject.toml
          command: |
            pip install .
            pip install .[zstd]
            pip install .[test]
            pip install codecov-cli
      - run:
          name: Run tests
          command: pytest --cov-report xml --junitxml=pytest.<< pipeline.parameters.python-version >>.junit.xml -o junit_family=legacy
      - run:
          name: Run ruff
          command: ruff check --respect-gitignore --output-format junit --output-file ruff.<< pipeline.parameters.python-version >>.junit.xml . || true
      - run:
          name: Upload tests result
          command: codecovcli do-upload --report-type test_results --file pytest.<< pipeline.parameters.python-version >>.junit.xml --file ruff.<< pipeline.parameters.python-version >>.junit.xml

  build-and-cov:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - checkout
      - run:
          name: Install dependencies from pyproject.toml
          command: |
            pip install .
            pip install .[zstd]
            pip install .[test]
            pip install codecov-cli
      - run:
          name: Run tests
          command: pytest --cov-report xml --junitxml=pytest.<< pipeline.parameters.python-version >>.junit.xml -o junit_family=legacy
      - run:
          name: Run ruff
          command: ruff check --respect-gitignore --output-format junit --output-file ruff.<< pipeline.parameters.python-version >>.junit.xml . || true
      - codecov/upload
      - run:
          name: Upload tests result
          command: codecovcli do-upload --report-type test_results --file pytest.<< pipeline.parameters.python-version >>.junit.xml --file ruff.<< pipeline.parameters.python-version >>.junit.xml

  testpypi_publish:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - checkout # checkout source code to working directory
      - run:
          name: Install dependencies from pyproject.toml
          command: |
            pip install .
            pip install .[build]
      - run:
          name: Build package
          command: python3 -m build
      - run:
          name: Upload
          command: python3 -m twine upload --repository testpypi --verbose --user $TWINE_USERNAME --password $TWINE_PASSWORD dist/*

  pypi_publish:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - checkout # checkout source code to working directory
      - run:
          name: Install dependencies from pyproject.toml
          command: |
            pip install .
            pip install .[build]
      - run:
          name: Build package
          command: python3 -m build
      - run:
          name: Upload
          command: python3 -m twine upload --verbose --user $TWINE_USERNAME --password $TWINE_PROD_PASSWORD dist/*

workflows:
  sample:
    jobs:
      - build-and-test:
          matrix:
            parameters:
                python-version : ['3.8', '3.9', '3.10', '3.11', '3.13']
      - build-and-cov:
          matrix:
            parameters:
                python-version : ['3.12']
#      - testpypi_publish:
#          requires:
#            - build-and-test
#          filters:
#            tags:
#              only: /^.*[ab]+.*$/
